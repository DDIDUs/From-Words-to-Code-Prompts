###Input:
from typing import List
import sys

def longest_subarray_with_sum_limit(nums: List[int], target: int) -> List[int]:
    """ Find the longest subarray of the given array `nums` such that the sum of its elements is less than or equal to the given `target`.
    >>> longest_subarray_with_sum_limit([3, 1, 5, 2, 1, 9, 7, 4], 10)
    [3, 1, 5]
    >>> longest_subarray_with_sum_limit([1, 2, 3, 4, 5], 3)
    [1, 2]
    """

###Output:
from typing import List
import sys

def longest_subarray_with_sum_limit(nums: List[int], target: int) -> List[int]:
    n = len(nums)
    left, right = 0, 0
    max_length = 0
    current_sum = 0
    result = []

    while right < n and current_sum + nums[right] <= target:
        current_sum += nums[right]
        right += 1

    if right > 0:
        result = nums[left:right]
        max_length = right

    while right < n:
        current_sum += nums[right]

        while current_sum > target:
            current_sum -= nums[left]
            left += 1

        if right - left + 1 > max_length:
            max_length = right - left + 1
            result = nums[left:right+1]

        right += 1

    return result

###Input
```python
{{ prompt }}
```

Write a python code for the problem. DO NOT generate any test cases or descriptions. Package your code in ```python ... ```.